{"version":3,"sources":["base/action.ts"],"names":[],"mappings":"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","file":"action.js","sourcesContent":["import {FAIL_RESULT, QUIET_RESULT, UNINITIALIZED_RESULT} from \"../implementation/common\";\r\nimport {assert} from 'chai';\r\nimport {ParsingState} from \"../abstract/basics/state\";\r\nimport {ResultKind} from \"../abstract/basics/result\";\r\n\r\n/**\r\n * a >= b\r\n * @param a\r\n * @param b\r\n * @returns {any}\r\n */\r\nfunction worseThan(a : ResultKind, b : ResultKind) {\r\n    if (a === ResultKind.OK) {\r\n        return b === ResultKind.OK;\r\n    }\r\n    if (a === ResultKind.SoftFail) {\r\n        return b === ResultKind.SoftFail || b === ResultKind.OK;\r\n    }\r\n    if (a === ResultKind.HardFail) {\r\n        return b !== ResultKind.FatalFail;\r\n    }\r\n    if (a === ResultKind.FatalFail) {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class BasicParsingState implements ParsingState {\r\n    position = 0;\r\n    state = undefined;\r\n    value = undefined;\r\n    kind : ResultKind;\r\n    expecting : string;\r\n    constructor(public input : string) {\r\n\r\n    }\r\n\r\n    atLeast(kind : ResultKind) {\r\n        return worseThan(this.kind, kind);\r\n    }\r\n\r\n    atMost(kind : ResultKind) {\r\n        return worseThan(kind, this.kind);\r\n    }\r\n\r\n    get isOk() {\r\n        return this.kind === ResultKind.OK;\r\n    }\r\n\r\n    get isSoft() {\r\n        return this.kind === ResultKind.SoftFail;\r\n    }\r\n\r\n    get isHard() {\r\n        return this.kind === ResultKind.HardFail;\r\n    }\r\n\r\n    get isFatal() {\r\n        return this.kind === ResultKind.FatalFail;\r\n    }\r\n}\r\n\r\n/**\r\n * A parsing action to perform. A parsing action is a fundamental operation that mutates a ParsingState.\r\n */\r\nexport abstract class ParjsAction {\r\n    /**\r\n     * The internal operation performed by the action. This will be overriden by derived classes.\r\n     * @param ps\r\n     * @private\r\n     */\r\n    protected abstract _apply(ps : ParsingState) : void | void;\r\n    abstract expecting : string;\r\n    abstract displayName : string;\r\n\r\n    /**\r\n     * Perform the action on the given ParsingState. This is a wrapper around a derived action's _apply method.\r\n     * @param ps The parsing state.\r\n     */\r\n    apply(ps : ParsingState) : void {\r\n        let {position, state} = ps;\r\n\r\n        //we do this to verify that the ParsingState's fields have been correctly set by the action.\r\n        ps.kind = ResultKind.Unknown;\r\n        ps.expecting = undefined;\r\n        ps.value = UNINITIALIZED_RESULT;\r\n\r\n        this._apply(ps);\r\n        assert.notStrictEqual(ps.kind, ResultKind.Unknown, \"the State's kind field must be set\");\r\n        if (!ps.isOk) {\r\n            ps.value = FAIL_RESULT;\r\n            ps.expecting = ps.expecting || this.expecting;\r\n        } else if (!this.isLoud) {\r\n            ps.value = QUIET_RESULT;\r\n        } else {\r\n            assert.notStrictEqual(ps.value, UNINITIALIZED_RESULT, \"a loud parser must set the State's return value if it succeeds.\");\r\n        }\r\n\r\n        if (!ps.isOk) {\r\n            assert.notStrictEqual(ps.expecting, undefined, \"if failure then there must be a reason\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether this action returns a value or not. Determines if the parser is loud or not.\r\n     */\r\n    abstract isLoud : boolean;\r\n}\r\n\r\n/**\r\n * Inherited by parser actions for basic parsers (e.g. string or numeric parsers), rather than combinators.\r\n */\r\nexport abstract class ParjsBasicAction extends ParjsAction {\r\n    isLoud = true;\r\n}"],"sourceRoot":"/src"}