{"version":3,"sources":["base/action.ts"],"names":[],"mappings":";;AAAA,mDAAyF;AACzF,6BAA4B;AAE5B,oDAAqD;AAErD;IAMI,2BAAmB,KAAc;QAAd,UAAK,GAAL,KAAK,CAAS;QALjC,aAAQ,GAAG,CAAC,CAAC;QACb,UAAK,GAAG,SAAS,CAAC;QAClB,UAAK,GAAG,SAAS,CAAC;IAKlB,CAAC;IAED,sBAAI,mCAAI;aAAR;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,mBAAU,CAAC,EAAE,CAAC;QACvC,CAAC;;;OAAA;IAED,sBAAI,qCAAM;aAAV;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,mBAAU,CAAC,QAAQ,CAAC;QAC7C,CAAC;;;OAAA;IAED,sBAAI,qCAAM;aAAV;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,mBAAU,CAAC,QAAQ,CAAC;QAC7C,CAAC;;;OAAA;IAED,sBAAI,sCAAO;aAAX;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,mBAAU,CAAC,SAAS,CAAC;QAC9C,CAAC;;;OAAA;IACL,wBAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBY,8CAAiB;AA2B9B;;GAEG;AACH;IAAA;IA0CA,CAAC;IAhCG;;;OAGG;IACH,2BAAK,GAAL,UAAM,EAAiB;QACd,IAAA,sBAAQ,EAAE,gBAAK,CAAO;QAE3B,4FAA4F;QAC5F,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,OAAO,CAAC;QAC7B,EAAE,CAAC,SAAS,GAAG,SAAS,CAAC;QACzB,EAAE,CAAC,KAAK,GAAG,6BAAoB,CAAC;QAEhC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAChB,aAAM,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,EAAE,mBAAU,CAAC,OAAO,EAAE,oCAAoC,CAAC,CAAC;QACzF,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,KAAK,GAAG,oBAAW,CAAC;YACvB,EAAE,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;QAClD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,KAAK,GAAG,qBAAY,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,aAAM,CAAC,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,6BAAoB,EAAE,iEAAiE,CAAC,CAAC;QAC7H,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,aAAM,CAAC,cAAc,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,wCAAwC,CAAC,CAAC;QAC7F,CAAC;IACL,CAAC;IAML,kBAAC;AAAD,CA1CA,AA0CC,IAAA;AA1CqB,kCAAW;AA4CjC;;GAEG;AACH;IAA+C,4CAAW;IAA1D;QAAA,qEAEC;QADG,YAAM,GAAG,IAAI,CAAC;;IAClB,CAAC;IAAD,uBAAC;AAAD,CAFA,AAEC,CAF8C,WAAW,GAEzD;AAFqB,4CAAgB","file":"action.js","sourcesContent":["import {FAIL_RESULT, QUIET_RESULT, UNINITIALIZED_RESULT} from \"../implementation/common\";\r\nimport {assert} from 'chai';\r\nimport {ParsingState} from \"../abstract/basics/state\";\r\nimport {ResultKind} from \"../abstract/basics/result\";\r\n\r\nexport class BasicParsingState implements ParsingState {\r\n    position = 0;\r\n    state = undefined;\r\n    value = undefined;\r\n    kind : ResultKind;\r\n    expecting : string;\r\n    constructor(public input : string) {\r\n\r\n    }\r\n\r\n    get isOk() {\r\n        return this.kind === ResultKind.OK;\r\n    }\r\n\r\n    get isSoft() {\r\n        return this.kind === ResultKind.SoftFail;\r\n    }\r\n\r\n    get isHard() {\r\n        return this.kind === ResultKind.HardFail;\r\n    }\r\n\r\n    get isFatal() {\r\n        return this.kind === ResultKind.FatalFail;\r\n    }\r\n}\r\n\r\n/**\r\n * A parsing action to perform. A parsing action is a fundamental operation that mutates a ParsingState.\r\n */\r\nexport abstract class ParjsAction {\r\n    /**\r\n     * The internal operation performed by the action. This will be overriden by derived classes.\r\n     * @param ps\r\n     * @private\r\n     */\r\n    protected abstract _apply(ps : ParsingState) : void | void;\r\n    abstract expecting : string;\r\n    abstract displayName : string;\r\n\r\n    /**\r\n     * Perform the action on the given ParsingState. This is a wrapper around a derived action's _apply method.\r\n     * @param ps The parsing state.\r\n     */\r\n    apply(ps : ParsingState) : void {\r\n        let {position, state} = ps;\r\n\r\n        //we do this to verify that the ParsingState's fields have been correctly set by the action.\r\n        ps.kind = ResultKind.Unknown;\r\n        ps.expecting = undefined;\r\n        ps.value = UNINITIALIZED_RESULT;\r\n\r\n        this._apply(ps);\r\n        assert.notStrictEqual(ps.kind, ResultKind.Unknown, \"the State's kind field must be set\");\r\n        if (!ps.isOk) {\r\n            ps.value = FAIL_RESULT;\r\n            ps.expecting = ps.expecting || this.expecting;\r\n        } else if (!this.isLoud) {\r\n            ps.value = QUIET_RESULT;\r\n        } else {\r\n            assert.notStrictEqual(ps.value, UNINITIALIZED_RESULT, \"a loud parser must set the State's return value if it succeeds.\");\r\n        }\r\n\r\n        if (!ps.isOk) {\r\n            assert.notStrictEqual(ps.expecting, undefined, \"if failure then there must be a reason\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether this action returns a value or not. Determines if the parser is loud or not.\r\n     */\r\n    abstract isLoud : boolean;\r\n}\r\n\r\n/**\r\n * Inherited by parser actions for basic parsers (e.g. string or numeric parsers), rather than combinators.\r\n */\r\nexport abstract class ParjsBasicAction extends ParjsAction {\r\n    isLoud = true;\r\n}"],"sourceRoot":"/src"}