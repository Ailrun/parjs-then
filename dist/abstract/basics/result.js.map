{"version":3,"sources":["abstract/basics/result.ts"],"names":[],"mappings":";;AAAA;;GAEG;AACH,gEAA+D;AAkB/D;;GAEG;AACH;IAEI,YAAmB,KAAS;QAAT,UAAK,GAAL,KAAK,CAAI;QAD5B,SAAI,GAAG,SAAS,CAAC,EAAE,CAAC;IAGpB,CAAC;IAED,OAAO;QACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,QAAQ;QACJ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;CACJ;AAbD,oCAaC;AAGD;;GAEG;AACH;IACI,YAAmB,IAAe,EAAS,KAAa;QAArC,SAAI,GAAJ,IAAI,CAAW;QAAS,UAAK,GAAL,KAAK,CAAQ;IAExD,CAAC;IACD,OAAO;QACH,MAAM,IAAI,qCAAmB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;CACJ;AAPD,oCAOC;AAWD,IAAc,SAAS,CA+CtB;AA/CD,WAAc,SAAS;IAsBnB;;;OAGG;IACU,iBAAO,GAAa,SAAS,CAAC;IAC3C;;;OAGG;IACU,YAAE,GAAQ,IAAI,CAAC;IAC5B;;;OAGG;IACU,kBAAQ,GAAc,UAAU,CAAC;IAC9C;;;OAGG;IACU,kBAAQ,GAAc,UAAU,CAAC;IAC9C;;;OAGG;IACU,mBAAS,GAAe,WAAW,CAAC;AACrD,CAAC,EA/Ca,SAAS,GAAT,iBAAS,KAAT,iBAAS,QA+CtB","file":"result.js","sourcesContent":["/**\r\n * Created by lifeg on 24/11/2016.\r\n */\r\nimport {ParsingFailureError} from \"../../base/parsing-failure\";\r\n\r\n/**\r\n * An object indicating trace information about the state of parsing when it was stopped.\r\n */\r\nexport interface Trace {\r\n    state : object;\r\n    position : number;\r\n    expecting : string;\r\n}\r\n/**\r\n * Used to maintain common members between SuccessReply, FailureReply, and other reply types.\r\n */\r\nexport interface AnyReply<T> {\r\n    kind : ReplyKind;\r\n    resolve() : T;\r\n}\r\n\r\n/**\r\n * Indicates a success reply and contains the value and other information.\r\n */\r\nexport class SuccessReply<T> implements AnyReply<T>{\r\n    kind = ReplyKind.OK;\r\n    constructor(public value : T){\r\n\r\n    }\r\n\r\n    resolve() : T {\r\n        return this.value;\r\n    }\r\n\r\n    toString() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Indicates a failure reply and contains information about the failure.\r\n */\r\nexport class FailureReply implements AnyReply<void> {\r\n    constructor(public kind : FailKind, public trace : Trace) {\r\n\r\n    }\r\n    resolve() : never {\r\n        throw new ParsingFailureError(this);\r\n    }\r\n}\r\n/**\r\n * A type that represents a SuccessReply or a FailureReply. Returned by parsers.\r\n */\r\nexport type Reply<T> = (SuccessReply<T> | FailureReply)\r\n\r\n/**\r\n * A type representing the reply of a quiet parser.\r\n */\r\nexport type QuietReply = Reply<void>;\r\n\r\nexport module ReplyKind {\r\n    /**\r\n     * An Unknown reply. Used internally.\r\n     */\r\n    export type Unknown = \"Unknown\";\r\n    /**\r\n     * The OK reply type.\r\n     */\r\n    export type OK = \"OK\";\r\n    /**\r\n     * The soft failure type.\r\n     */\r\n    export type SoftFail = \"SoftFail\";\r\n    /**\r\n     * The hard failure type.\r\n     */\r\n    export type HardFail = \"HardFail\";\r\n    /**\r\n     * The fatal failure type.\r\n     */\r\n    export type FatalFail = \"FatalFail\";\r\n\r\n    /**\r\n     * An Unknown reply.\r\n     * @type {string}\r\n     */\r\n    export const Unknown : Unknown = \"Unknown\";\r\n    /**\r\n     * An OK reply.\r\n     * @type {string}\r\n     */\r\n    export const OK : OK = \"OK\";\r\n    /**\r\n     * A soft failure reply.\r\n     * @type {string}\r\n     */\r\n    export const SoftFail : SoftFail = \"SoftFail\";\r\n    /**\r\n     * A hard failure reply.\r\n     * @type {string}\r\n     */\r\n    export const HardFail : HardFail = \"HardFail\";\r\n    /**\r\n     * A fatal failure reply.\r\n     * @type {string}\r\n     */\r\n    export const FatalFail : FatalFail = \"FatalFail\";\r\n}\r\n/**\r\n * Specifies a reply kind, indicating success or failure, and the severity of the failure.\r\n */\r\nexport type ReplyKind = ReplyKind.OK | ReplyKind.HardFail | ReplyKind.FatalFail | ReplyKind.SoftFail | ReplyKind.Unknown;\r\n\r\n/**\r\n * Specifies a ReplyKind which is a failure.\r\n */\r\nexport type FailKind = ReplyKind.HardFail | ReplyKind.FatalFail | ReplyKind.SoftFail;\r\n"],"sourceRoot":"/src"}