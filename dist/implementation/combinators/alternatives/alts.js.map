{"version":3,"sources":["implementation/combinators/alternatives/alts.ts"],"names":[],"mappings":";;AAAA,iDAAiD;AACjD,yCAAoC;AAGpC,4DAA0D;AAC1D;;GAEG;AACH,aAAqB,SAAQ,oBAAW;IAIpC,YAAoB,IAAwB;QACxC,KAAK,EAAE,CAAC;QADQ,SAAI,GAAJ,IAAI,CAAoB;QAF5C,gBAAW,GAAG,MAAM,CAAC;QAIjB,wEAAwE;QACxE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChD,eAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,GAAG,WAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,QAAQ,EAAC,GAAG,EAAE,CAAC;QACpB,IAAI,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC;QAClB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,2BAA2B;YAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,gCAAgC;YAChC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,gDAAgD;gBAChD,MAAM,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnB,mDAAmD;gBACnD,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,2BAA2B;gBAC3B,MAAM,CAAC;YACX,CAAC;QACL,CAAC;QACD,EAAE,CAAC,IAAI,GAAG,kBAAS,CAAC,QAAQ,CAAC;IACjC,CAAC;CACJ;AAnCD,0BAmCC","file":"alts.js","sourcesContent":["import {ParjsAction} from \"../../../base/action\";\r\nimport {Issues} from \"../../common\";\r\nimport {AnyParserAction} from \"../../../abstract/basics/action\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {ReplyKind} from \"../../../abstract/basics/result\";\r\n/**\r\n * Created by User on 21-Nov-16.\r\n */\r\nexport class PrsAlts extends ParjsAction {\r\n    isLoud : boolean;\r\n    displayName = \"alts\";\r\n    expecting : string;\r\n    constructor(private alts : AnyParserAction[]) {\r\n        super();\r\n        //if the list is empty, every won't execute and alts[0] won't be called.\r\n        if (!alts.every(x => x.isLoud === alts[0].isLoud)) {\r\n            Issues.mixedLoudnessNotPermitted(this);\r\n        }\r\n        this.isLoud = alts.every(x => x.isLoud === alts[0].isLoud);\r\n        this.expecting = `any of: ${alts.join(\", \")}`;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {position} = ps;\r\n        let {alts} = this;\r\n        for (let i = 0; i < alts.length; i++) {\r\n            //go over each alternative.\r\n            let cur = alts[i];\r\n            //apply it on the current state.\r\n            cur.apply(ps);\r\n            if (ps.isOk) {\r\n                //if success, return. The PS records the result.\r\n                return;\r\n            } else if (ps.isSoft) {\r\n                //backtrack to the original position and try again.\r\n                ps.position = position;\r\n            } else {\r\n                //if failure, return false,\r\n                return;\r\n            }\r\n        }\r\n        ps.kind = ReplyKind.SoftFail;\r\n    }\r\n}\r\n"],"sourceRoot":"/src"}