{"version":3,"sources":["implementation/combinators/invariant/require.ts"],"names":[],"mappings":";;AAAA,+CAAiD;AACjD,uCAAoC;AAEpC,0DAA2D;AAE3D;;GAEG;AACH;IAA6B,mCAAW;IAIpC,iBACY,KAAuB,EACvB,WAAuC,EACvC,QAAQ,EACR,WAAW;QAJvB,YAMI,iBAAO,SAGV;QARW,WAAK,GAAL,KAAK,CAAkB;QACvB,iBAAW,GAAX,WAAW,CAA4B;QACvC,cAAQ,GAAR,QAAQ,CAAA;QACR,iBAAW,GAAX,WAAW,CAAA;QAPvB,iBAAW,GAAG,MAAM,CAAC;QACrB,YAAM,GAAG,IAAI,CAAC;QASV,KAAK,CAAC,MAAM,IAAI,eAAM,CAAC,uBAAuB,CAAC,KAAI,CAAC,CAAC;QACrD,KAAI,CAAC,SAAS,GAAG,qBAAmB,KAAK,CAAC,WAAW,sCAAiC,WAAa,CAAC;;IACxG,CAAC;IAED,wBAAM,GAAN,UAAO,EAAiB;QAChB,IAAA,SAAqC,EAApC,gBAAK,EAAE,4BAAW,EAAE,sBAAQ,CAAS;QAC1C,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,IAAI,GAAG,WAAW,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,mBAAU,CAAC,EAAE,GAAG,QAAQ,CAAC;IAC/D,CAAC;IACL,cAAC;AAAD,CAvBA,AAuBC,CAvB4B,oBAAW,GAuBvC;AAvBY,0BAAO","file":"require.js","sourcesContent":["import {ParjsAction} from \"../../../base/action\";\r\nimport {Issues} from \"../../common\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {ResultKind} from \"../../../abstract/basics/result\";\r\nimport {AnyParserAction} from \"../../../abstract/basics/action\";\r\n/**\r\n * Created by User on 21-Nov-16.\r\n */\r\nexport class PrsMust extends ParjsAction {\r\n    displayName = \"must\";\r\n    isLoud = true;\r\n    expecting : string;\r\n    constructor(\r\n        private inner : AnyParserAction,\r\n        private requirement : (result : any) => boolean,\r\n        private failType,\r\n        private qualityName\r\n    ) {\r\n        super();\r\n        inner.isLoud || Issues.quietParserNotPermitted(this);\r\n        this.expecting = `intenral parser ${inner.displayName} yielding a result satisfying ${qualityName}`;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {inner, requirement, failType} = this;\r\n        inner.apply(ps);\r\n        if (!ps.isOk) {\r\n            return;\r\n        }\r\n        ps.kind = requirement(ps.value) ? ResultKind.OK : failType;\r\n    }\r\n}"],"sourceRoot":"/src"}