{"version":3,"sources":["implementation/combinators/map/str.ts"],"names":[],"mappings":";AAAA,yCAA0C;AAC1C,iDAAiD;AAGjD,wDAAyD;AACzD;;GAEG;AACH,YAAoB,SAAQ,oBAAW;IAInC,YAAoB,KAAuB;QACvC,KAAK,EAAE,CAAC;QADQ,UAAK,GAAL,KAAK,CAAkB;QAH3C,gBAAW,GAAG,KAAK,CAAC;QACpB,WAAM,GAAG,IAAI,CAAC;QAIV,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC;QACnB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,CAAC;QACX,CAAC;QACD,IAAI,EAAC,KAAK,EAAC,GAAG,EAAE,CAAC;QACjB,IAAI,OAAO,GAAG,OAAO,KAAK,CAAC;QAC3B,EAAE,CAAC,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;QAE3B,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,qBAAY,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC;QAClB,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7C,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,KAAK,GAAG,uBAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC5B,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC;QACD,IAAI,CAAC,CAAC;YACF,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAChC,CAAC;IAEL,CAAC;CACJ;AArCD,wBAqCC","file":"str.js","sourcesContent":["import {QUIET_RESULT} from \"../../common\";\r\nimport {ParjsAction} from \"../../../base/action\";\r\nimport {AnyParserAction} from \"../../../abstract/basics/action\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {StringHelpers} from \"../../../functions/helpers\";\r\n/**\r\n * Created by User on 21-Nov-16.\r\n */\r\nexport class PrsStr extends ParjsAction {\r\n    displayName = \"str\";\r\n    isLoud = true;\r\n    expecting : string;\r\n    constructor(private inner : AnyParserAction) {\r\n        super();\r\n        this.expecting = inner.expecting;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {inner} = this;\r\n        inner.apply(ps);\r\n        if (!ps.isOk) {\r\n            return;\r\n        }\r\n        let {value} = ps;\r\n        let typeStr = typeof value;\r\n        if (typeStr === \"string\") {\r\n\r\n        }\r\n        else if (value === QUIET_RESULT) {\r\n            ps.value = \"\";\r\n        }\r\n        else if (value === null || value === undefined) {\r\n            ps.value = String(value);\r\n        }\r\n        else if (value instanceof Array) {\r\n            ps.value = StringHelpers.recJoin(value);\r\n        }\r\n        else if (typeStr === \"symbol\") {\r\n            ps.value = String(value).slice(7, -1);\r\n        }\r\n        else {\r\n            ps.value = value.toString();\r\n        }\r\n\r\n    }\r\n}"],"sourceRoot":"/src"}