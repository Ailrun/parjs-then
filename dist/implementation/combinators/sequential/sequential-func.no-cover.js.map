{"version":3,"sources":["implementation/combinators/sequential/sequential-func.no-cover.ts"],"names":[],"mappings":";;AAAA,+CAAiD;AACjD,uCAAoC;AAEpC,0DAA2D;AAG3D;;GAEG;AACH;IAAgC,sCAAW;IAIvC,oBAAoB,OAAyB,EAAU,eAAuD;QAA9G,YACI,iBAAO,SAEV;QAHmB,aAAO,GAAP,OAAO,CAAkB;QAAU,qBAAe,GAAf,eAAe,CAAwC;QAH9G,YAAM,GAAG,IAAI,CAAC;QACd,iBAAW,GAAG,SAAS,CAAC;QAIpB,KAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;;IACvC,CAAC;IAED,2BAAM,GAAN,UAAO,EAAiB;QAChB,IAAA,SAAiC,EAAhC,oBAAO,EAAE,oCAAe,CAAS;QACtC,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,6CAA6C;YAC7C,MAAM,CAAC;QACX,CAAC;QACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9C,IAAI,GAAG,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YACxB,GAAG,CAAC,MAAM,IAAI,eAAM,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnB,uDAAuD;gBACvD,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,QAAQ,CAAC;YAClC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC;YACX,CAAC;QACL,CAAC;QACD,EAAE,CAAC,KAAK,GAAG,OAAO,CAAC;QACnB,MAAM,CAAC,mBAAU,CAAC,EAAE,CAAC;IACzB,CAAC;IACL,iBAAC;AAAD,CAlCA,AAkCC,CAlC+B,oBAAW,GAkC1C;AAlCY,gCAAU","file":"sequential-func.no-cover.js","sourcesContent":["import {ParjsAction} from \"../../../base/action\";\r\nimport {Issues} from \"../../common\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {ResultKind} from \"../../../abstract/basics/result\";\r\nimport {AnyParserAction} from \"../../../abstract/basics/action\";\r\nimport {LoudParser} from \"../../../abstract/combinators/loud\";\r\n/**\r\n * Created by User on 21-Nov-16.\r\n */\r\nexport class PrsSeqFunc extends ParjsAction {\r\n    isLoud = true;\r\n    displayName = \"seqFunc\";\r\n    expecting : string;\r\n    constructor(private initial : AnyParserAction, private parserSelectors : ((result : any) => LoudParser<any>)[]) {\r\n        super();\r\n        this.expecting = initial.expecting;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {initial, parserSelectors} = this;\r\n        let results = [];\r\n        initial.apply(ps);\r\n        if (!ps.isOk) {\r\n            //propagate the failure of 'initial' upwards.\r\n            return;\r\n        }\r\n        for (let i = 0; i < parserSelectors.length; i++) {\r\n            let cur = parserSelectors[i];\r\n            let prs = cur(ps.value);\r\n            prs.isLoud || Issues.quietParserNotPermitted(this);\r\n            prs.action.apply(ps);\r\n            if (ps.isOk) {\r\n                results.maybePush(ps.value);\r\n            } else if (ps.isSoft) {\r\n                //at this point, even a soft failure becomes a hard one\r\n                ps.kind = ResultKind.HardFail;\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n        ps.value = results;\r\n        return ResultKind.OK;\r\n    }\r\n}\r\n"],"sourceRoot":"/src"}