{"version":3,"sources":["implementation/combinators/sequential/many.ts"],"names":[],"mappings":";;AAAA,+CAAiD;AACjD,uCAAkD;AAGlD,0DAA2D;AAC3D;;GAEG;AACH;IAA6B,mCAAW;IAIpC,iBAAoB,KAAuB,EAAU,aAAsB,EAAU,YAAqB;QAA1G,YACI,iBAAO,SAIV;QALmB,WAAK,GAAL,KAAK,CAAkB;QAAU,mBAAa,GAAb,aAAa,CAAS;QAAU,kBAAY,GAAZ,YAAY,CAAS;QAF1G,iBAAW,GAAG,MAAM,CAAC;QAIjB,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC3B,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QACjC,aAAa,IAAI,YAAY,IAAI,eAAM,CAAC,cAAc,CAAC,KAAI,CAAC,CAAC;;IACjE,CAAC;IAED,wBAAM,GAAN,UAAO,EAAiB;QAChB,IAAA,SAA2C,EAA1C,gBAAK,EAAE,gCAAa,EAAE,8BAAY,CAAS;QAC3C,IAAA,sBAAQ,CAAO;QACpB,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,IAAI,EAAE,CAAC;YACV,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAChB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;gBAAC,KAAK,CAAC;YACpB,EAAE,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC;gBAAC,KAAK,CAAC;YAC9B,EAAE,CAAC,CAAC,aAAa,KAAK,QAAQ,IAAI,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACzD,eAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAC;YACD,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;YACvB,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC,EAAE,CAAC;QACR,CAAC;QACD,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,mBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,mBAAU,CAAC,QAAQ,GAAG,mBAAU,CAAC,QAAQ,CAAC;YAC9D,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;QACf,gCAAgC;QAChC,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACvB,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,EAAE,CAAC;IAC5B,CAAC;IACL,cAAC;AAAD,CAvCA,AAuCC,CAvC4B,oBAAW,GAuCvC;AAvCY,0BAAO","file":"many.js","sourcesContent":["import {ParjsAction} from \"../../../base/action\";\r\nimport {QUIET_RESULT, Issues} from \"../../common\";\r\nimport {AnyParserAction} from \"../../../abstract/basics/action\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {ResultKind} from \"../../../abstract/basics/result\";\r\n/**\r\n * Created by User on 21-Nov-16.\r\n */\r\nexport class PrsMany extends ParjsAction {\r\n    isLoud : boolean;\r\n    displayName = \"many\";\r\n    expecting : string;\r\n    constructor(private inner : AnyParserAction, private maxIterations : number, private minSuccesses : number) {\r\n        super();\r\n        this.isLoud = inner.isLoud;\r\n        this.expecting = inner.expecting;\r\n        maxIterations >= minSuccesses || Issues.willAlwaysFail(this);\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {inner, maxIterations, minSuccesses} = this;\r\n        let {position} = ps;\r\n        let arr = [];\r\n        let i = 0;\r\n        while (true) {\r\n            inner.apply(ps);\r\n            if (!ps.isOk) break;\r\n            if (i >= maxIterations) break;\r\n            if (maxIterations === Infinity && ps.position === position) {\r\n                Issues.guardAgainstInfiniteLoop(this);\r\n            }\r\n            position = ps.position;\r\n            arr.maybePush(ps.value);\r\n            i++;\r\n        }\r\n        if (ps.kind >= ResultKind.HardFail) {\r\n            return;\r\n        }\r\n        if (i < minSuccesses) {\r\n            ps.kind = i === 0 ? ResultKind.SoftFail : ResultKind.HardFail;\r\n            return;\r\n        }\r\n        ps.value = arr;\r\n        //recover from the last failure.\r\n        ps.position = position;\r\n        ps.kind = ResultKind.OK;\r\n    }\r\n}"],"sourceRoot":"/src"}