{"version":3,"sources":["implementation/parsers/numbers/int.ts"],"names":[],"mappings":";AAAA,iDAAiD;AAEjD,2CAAsC;AAGtC,4DAA2D;AAe3D,YAAoB,SAAQ,oBAAW;IAInC,YAAoB,OAAoB;QACpC,KAAK,EAAE,CAAC;QADQ,YAAO,GAAP,OAAO,CAAa;QAHxC,gBAAW,GAAG,KAAK,CAAC;QACpB,WAAM,GAAG,IAAI,CAAC;QAIV,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,KAAK,OAAO,CAAC,SAAS,GAAG,QAAQ,GAAG,UAAU,oBAAoB,OAAO,CAAC,IAAI,EAAE,CAAC;IACtG,CAAC;IACD,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,OAAO,EAAG,EAAC,SAAS,EAAE,IAAI,EAAC,EAAC,GAAG,IAAI,CAAC;QACzC,IAAI,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC;QAC1B,IAAI,IAAI,GAAG,SAAS,GAAG,qBAAS,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QACnD,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;YACb,UAAU,GAAG,IAAI,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,GAAG,CAAC,CAAC;QACb,CAAC;QACD,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;QACvB,qBAAS,CAAC,iBAAiB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACtC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;QAElE,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3B,EAAE,CAAC,IAAI,GAAG,UAAU,GAAG,mBAAU,CAAC,QAAQ,GAAG,mBAAU,CAAC,QAAQ,CAAC;QACrE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;YACjB,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,EAAE,CAAC;QAC5B,CAAC;IAEL,CAAC;CACJ;AAlCD,wBAkCC","file":"int.js","sourcesContent":["import {ParjsAction} from \"../../../base/action\";\r\nimport {Chars, Codes} from \"../../../functions/char-indicators\";\r\nimport {Parselets} from './parselets';\r\nimport {FastMath} from \"../../../functions/math\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {ResultKind} from \"../../../abstract/basics/result\";\r\n/**\r\n * Created by User on 28-Nov-16.\r\n */\r\n\r\n/*\r\n    Legal decimal integer format:\r\n    (-|+)\\d+\r\n */\r\n\r\nexport interface IntOptions {\r\n    allowSign ?: boolean;\r\n    base ?: number;\r\n}\r\n\r\nexport class PrsInt extends ParjsAction {\r\n    displayName = \"int\";\r\n    isLoud = true;\r\n    expecting : string;\r\n    constructor(private options : IntOptions) {\r\n        super();\r\n        if (options.base > 36) {\r\n            throw new Error(\"invalid base\");\r\n        }\r\n        this.expecting = `a ${options.allowSign ? \"signed\" : \"unsigned\"} integer in base ${options.base}`;\r\n    }\r\n    _apply(ps : ParsingState) {\r\n        let {options : {allowSign, base}} = this;\r\n        let {position, input} = ps;\r\n        let initPos = ps.position;\r\n        let sign = allowSign ? Parselets.parseSign(ps) : 0;\r\n        let parsedSign = false;\r\n        if (sign !== 0) {\r\n            parsedSign = true;\r\n        } else {\r\n            sign = 1;\r\n        }\r\n        position = ps.position;\r\n        Parselets.parseDigitsInBase(ps, base);\r\n        let value = parseInt(input.substring(initPos, ps.position), base);\r\n\r\n        if (ps.position === position) {\r\n            ps.kind = parsedSign ? ResultKind.HardFail : ResultKind.SoftFail;\r\n        } else {\r\n            ps.value = value;\r\n            ps.kind = ResultKind.OK;\r\n        }\r\n\r\n    }\r\n}"],"sourceRoot":"/src"}