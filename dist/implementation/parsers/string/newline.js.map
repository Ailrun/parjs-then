{"version":3,"sources":["implementation/parsers/string/newline.ts"],"names":[],"mappings":";;AAAA,iDAAiD;AACjD,wEAAgE;AAChE,4DAA0D;AAE1D;;GAEG;AAEH,gBAAwB,SAAQ,oBAAW;IAIvC,YAAoB,YAAsB;QACtC,KAAK,EAAE,CAAC;QADQ,iBAAY,GAAZ,YAAY,CAAU;QAH1C,gBAAW,GAAG,SAAS,CAAC;QACxB,WAAM,GAAG,IAAI,CAAC;QAIV,IAAI,CAAC,SAAS,GAAG,YAAY,GAAG,0BAA0B,GAAG,kBAAkB,CAAC;IACpF,CAAC;IACD,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,EAAC,YAAY,EAAC,GAAG,IAAI,CAAC;QAC1B,EAAE,CAAC,CAAC,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,EAAE,CAAC,IAAI,GAAG,kBAAS,CAAC,QAAQ,CAAC;YAC7B,MAAM,CAAC;QACX,CAAC;QACD,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAExC,EAAE,CAAC,CAAC,YAAY,IAAI,uBAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjD,EAAE,CAAC,QAAQ,EAAE,CAAC;YACd,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,EAAE,CAAC,IAAI,GAAG,kBAAS,CAAC,EAAE,CAAC;YACvB,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,KAAK,uBAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3B,EAAE,CAAC,QAAQ,EAAE,CAAC;YACd,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC;YAChB,EAAE,CAAC,IAAI,GAAG,kBAAS,CAAC,EAAE,CAAC;YACvB,MAAM,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,KAAK,uBAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YACzC,QAAQ,EAAE,CAAC;YACX,EAAE,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,uBAAK,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC1E,EAAE,CAAC,QAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC;gBAC3B,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC;gBAClB,EAAE,CAAC,IAAI,GAAG,kBAAS,CAAC,EAAE,CAAC;gBACvB,MAAM,CAAC;YACX,CAAC;YACD,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACvB,EAAE,CAAC,KAAK,GAAG,IAAI,CAAC;YAChB,EAAE,CAAC,IAAI,GAAG,kBAAS,CAAC,EAAE,CAAC;YACvB,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,IAAI,GAAG,kBAAS,CAAC,QAAQ,CAAC;IACjC,CAAC;CACJ;AA3CD,gCA2CC","file":"newline.js","sourcesContent":["import {ParjsAction} from \"../../../base/action\";\r\nimport {Codes, Chars} from \"../../../functions/char-indicators\";\r\nimport {ReplyKind} from \"../../../abstract/basics/result\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\n/**\r\n * Created by User on 24-Nov-16.\r\n */\r\n\r\nexport class PrsNewline extends ParjsAction {\r\n    displayName = \"newline\";\r\n    isLoud = true;\r\n    expecting : string;\r\n    constructor(private matchUnicode : boolean) {\r\n        super();\r\n        this.expecting = matchUnicode ? \"a unicode newline string\" : \"a newline string\";\r\n    }\r\n    _apply(ps : ParsingState) {\r\n        let {position, input} = ps;\r\n        let {matchUnicode} = this;\r\n        if (position >= input.length) {\r\n            ps.kind = ReplyKind.SoftFail;\r\n            return;\r\n        }\r\n        let charAt = input.charCodeAt(position);\r\n\r\n        if (matchUnicode && Codes.isUnicodeNewline(charAt)) {\r\n            ps.position++;\r\n            ps.value = input.charAt(position);\r\n            ps.kind = ReplyKind.OK;\r\n            return;\r\n        }\r\n        if (charAt === Codes.newline) {\r\n            ps.position++;\r\n            ps.value = '\\n';\r\n            ps.kind = ReplyKind.OK;\r\n            return;\r\n        } else if (charAt === Codes.carriageReturn) {\r\n            position++;\r\n            if (position < input.length && input.charCodeAt(position) === Codes.newline) {\r\n                ps.position = position + 1;\r\n                ps.value = '\\r\\n';\r\n                ps.kind = ReplyKind.OK;\r\n                return;\r\n            }\r\n            ps.position = position;\r\n            ps.value = '\\r';\r\n            ps.kind = ReplyKind.OK;\r\n            return;\r\n        }\r\n        ps.kind = ReplyKind.SoftFail;\r\n    }\r\n}"],"sourceRoot":"/src"}