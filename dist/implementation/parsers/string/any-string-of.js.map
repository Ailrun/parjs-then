{"version":3,"sources":["implementation/parsers/string/any-string-of.ts"],"names":[],"mappings":";AAIA,iDAAmE;AAEnE,4DAA2D;AAC3D,iBAAyB,SAAQ,yBAAgB;IAI7C,YAAoB,IAAe;QAC/B,KAAK,EAAE,CAAC;QADQ,SAAI,GAAJ,IAAI,CAAW;QAHnC,gBAAW,GAAE,aAAa,CAAC;QAC3B,WAAM,GAAG,IAAI,CAAC;QAIV,IAAI,CAAC,SAAS,GAAG,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAE,EAAE,CAAC;IACrE,CAAC;IAED,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,QAAQ,EAAE,KAAK,EAAC,GAAG,EAAE,CAAC;QAC3B,IAAI,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC;QAClB,OAAO,EACP,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC;gBAAC,QAAQ,CAAC;YACtD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACrC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1D,QAAQ,CAAC,OAAO,CAAC;gBACrB,CAAC;YACL,CAAC;YACD,kEAAkE;YAClE,EAAE,CAAC,QAAQ,GAAG,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC;YACvC,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC;YAClB,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,EAAE,CAAC;YACxB,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,QAAQ,CAAC;IAClC,CAAC;CACJ;AA7BD,kCA6BC","file":"any-string-of.js","sourcesContent":["/**\r\n * Created by User on 22-Nov-16.\r\n */\r\nimport _ = require('lodash');\r\nimport {ParjsAction, ParjsBasicAction} from \"../../../base/action\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {ResultKind} from \"../../../abstract/basics/result\";\r\nexport class AnyStringOf extends ParjsBasicAction {\r\n    displayName =\"anyStringOf\";\r\n    isLoud = true;\r\n    expecting : string;\r\n    constructor(private strs : string[]) {\r\n        super();\r\n        this.expecting = `any of ${strs.map(x => `'${x}'`).join(\", \",)}`;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {position, input} = ps;\r\n        let {strs} = this;\r\n        strLoop:\r\n        for (let i = 0; i < strs.length; i++) {\r\n            let curStr = strs[i];\r\n            if (input.length - position < curStr.length) continue;\r\n            for (let j = 0; j < curStr.length; j++) {\r\n                if (curStr.charCodeAt(j) !== input.charCodeAt(position + j)) {\r\n                    continue strLoop;\r\n                }\r\n            }\r\n            //this means we did not contiue strLoop so curStr passed our tests\r\n            ps.position = position + curStr.length;\r\n            ps.value = curStr;\r\n            ps.kind = ResultKind.OK;\r\n            return;\r\n        }\r\n        ps.kind = ResultKind.SoftFail;\r\n    }\r\n}"],"sourceRoot":"/src"}