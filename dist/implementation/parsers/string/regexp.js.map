{"version":3,"sources":["implementation/parsers/string/regexp.ts"],"names":[],"mappings":";;AAAA,+CAAmE;AAEnE,0DAA2D;AAC3D;;GAEG;AAEH;IAA+B,qCAAgB;IAG3C,mBAAoB,MAAe;QAAnC,YACI,iBAAO,SAKV;QANmB,YAAM,GAAN,MAAM,CAAS;QAFnC,iBAAW,GAAG,QAAQ,CAAC;QAInB,IAAI,KAAK,GAAG,CAAC,MAAM,CAAC,UAAU,IAAI,GAAG,EAAE,MAAM,CAAC,SAAS,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxF,IAAI,gBAAgB,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC9D,MAAM,GAAG,gBAAgB,CAAC;QAC1B,KAAI,CAAC,SAAS,GAAG,qBAAmB,MAAM,CAAC,MAAM,MAAG,CAAC;;IACzD,CAAC;IAED,0BAAM,GAAN,UAAO,EAAiB;QACf,IAAA,gBAAK,EAAE,sBAAQ,CAAO;QACtB,IAAA,oBAAM,CAAS;QACpB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/B,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACT,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,QAAQ,CAAC;YAC9B,MAAM,CAAC;QACX,CAAC;QACD,EAAE,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC/B,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;QACf,EAAE,CAAC,IAAI,GAAG,mBAAU,CAAC,EAAE,CAAC;IAC5B,CAAC;IACL,gBAAC;AAAD,CAzBA,AAyBC,CAzB8B,yBAAgB,GAyB9C;AAzBY,8BAAS","file":"regexp.js","sourcesContent":["import {ParjsAction, ParjsBasicAction} from \"../../../base/action\";\r\nimport {ParsingState} from \"../../../abstract/basics/state\";\r\nimport {ResultKind} from \"../../../abstract/basics/result\";\r\n/**\r\n * Created by User on 24-Nov-16.\r\n */\r\n\r\nexport class PrsRegexp extends ParjsBasicAction {\r\n    displayName = \"regexp\";\r\n    expecting : string;\r\n    constructor(private regexp : RegExp) {\r\n        super();\r\n        let flags = [regexp.ignoreCase && \"i\", regexp.multiline && \"m\"].filter(x => x).join(\"\");\r\n        let normalizedRegexp = new RegExp(\"^\" + regexp.source, flags);\r\n        regexp = normalizedRegexp;\r\n        this.expecting = `input matching '${regexp.source}'`;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {input, position} = ps;\r\n        let {regexp} = this;\r\n        input = input.substr(position);\r\n        let match = regexp.exec(input);\r\n        if (!match) {\r\n            ps.kind = ResultKind.SoftFail;\r\n            return;\r\n        }\r\n        ps.position += match[0].length;\r\n        let arr = match.slice(0);\r\n        ps.value = arr;\r\n        ps.kind = ResultKind.OK;\r\n    }\r\n}"],"sourceRoot":"/src"}