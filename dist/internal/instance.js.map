{"version":3,"sources":["internal/instance.ts"],"names":[],"mappings":"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","file":"instance.js","sourcesContent":["/**\r\n * @module parjs/internal\r\n */ /** */\r\nimport {\r\n    PrsSeq\r\n    , MapParser, PrsStr, PrsNot, PrsQuiet, PrsMapResult, PrsAlts, PrsBacktrack, PrsMust, PrsMustCapture, PrsMany, PrsSeqFunc, PrsExactly, PrsManyTill, PrsManySepBy, PrsAltVal} from './implementation/combinators';\r\nimport {BaseParjsParser} from \"./implementation/parser\";\r\nimport _ = require('lodash');\r\nimport {ParjsAction, ParjsBasicAction} from \"./implementation/action\";\r\nimport {Predicates} from \"./implementation/functions/predicates\";\r\nimport {LoudParser} from \"../loud\";\r\nimport {ReplyKind} from \"../reply\";\r\nimport {FailureReply} from './reply';\r\nimport {QuietParser} from \"../quiet\";\r\nimport {AnyParser} from \"../any\";\r\nimport {PrsSoft} from \"./implementation/combinators/alternatives/soft\";\r\nimport {ActParser} from \"./implementation/combinators/map/act\";\r\nimport {ParjsStaticHelper} from \"../parjs\";\r\nimport {AnyParserAction} from \"./action\";\r\nimport {Parjs} from '../';\r\nfunction wrap(action : ParjsAction) {\r\n    return new ParjsParser(action);\r\n}\r\n\r\n\r\n    export class ParjsParser extends BaseParjsParser implements LoudParser<any>, QuietParser{\r\n\r\n    mixState(newState  : any) : ParjsParser {\r\n        return Parjs.nop.act(state =>\r\n            Object.assign(state, newState)).then(this);\r\n    }\r\n\r\n    thenChoose<TParser extends AnyParser>(selector : (x : any) => TParser, map ?: Map<any, TParser>) : TParser {\r\n        return wrap(new PrsSeqFunc(this.action, selector, map)).withName(\"thenChoose\") as any;\r\n    }\r\n\r\n    between(preceding : AnyParser, proceeding ?: AnyParser) {\r\n        let bet : any;\r\n        if (proceeding) {\r\n            bet = preceding.q.then(this).then(proceeding.q);\r\n        } else {\r\n            bet = preceding.q.then(this).then(preceding.q);\r\n        }\r\n        return bet.withName(\"between\");\r\n    }\r\n    get backtrack() {\r\n        return wrap(new PrsBacktrack(this.action)).withName(\"backtrack\");\r\n    }\r\n\r\n    mustCapture(failType : ReplyKind.Fail = ReplyKind.HardFail) {\r\n        return wrap(new PrsMustCapture(this.action, failType)).withName(\"mustCapture\");\r\n    }\r\n\r\n    or(...others : AnyParser[]) {\r\n        return wrap(new PrsAlts([this, ...others].map(x => x.action))).withName(\"or\");\r\n    }\r\n\r\n    get state(): LoudParser<any> {\r\n        let ret = wrap(new MapParser(this.action, (r, s) => s));\r\n        return ret.withName(\"state\");\r\n    }\r\n\r\n    map(f) {\r\n        //f is (result, state) => any if this.isLoud\r\n        //f is (state) => any otherwise\r\n        let mapper : (result : any, state : any) => any;\r\n        if (this.isLoud) {\r\n            mapper = f;\r\n        } else {\r\n            mapper = (result, state) => f(state);\r\n        }\r\n        return wrap(new MapParser(this.action, mapper)).withName(\"map\");\r\n    }\r\n\r\n    act(f) {\r\n        //f is (result, state) => void if this.isLoud\r\n        //f is (state) => void otherwise.\r\n        let mapper : (result : any, state : any) => void;\r\n        if (this.isLoud) {\r\n            mapper = f;\r\n        } else {\r\n            mapper = (result, state) => f(state);\r\n        }\r\n        return wrap(new ActParser(this.action, mapper)).withName(\"act\");\r\n    }\r\n\r\n    get q() {\r\n        return wrap(new PrsQuiet(this.action)).withName(\"quiet\");\r\n    }\r\n\r\n    get soft() {\r\n        return wrap(new PrsSoft(this.action)).withName(\"soften\");\r\n    }\r\n\r\n    then(...next : any[]) : any {\r\n        let actions = [this.action, ...next.map(x => x.action)];\r\n        let seqParse = wrap(new PrsSeq(actions));\r\n        let loudCount = actions.filter(x => x.isLoud).length;\r\n        let ret;\r\n        if (loudCount === 1) {\r\n            ret = seqParse.map(x => x[0]);\r\n        } else if (loudCount === 0) {\r\n            ret= seqParse.q;\r\n        } else {\r\n            ret= seqParse;\r\n        }\r\n        return ret.withName(\"then\");\r\n    }\r\n    many(minSuccesses : number = 0, maxIters : number = Infinity) {\r\n        return wrap(new PrsMany(this.action, maxIters, minSuccesses)).withName(\"many\");\r\n    }\r\n\r\n    manyTill(till : AnyParser | any, tillOptional = false) {\r\n        if (_.isFunction(till)) {\r\n            return this.must(till, undefined, ReplyKind.SoftFail).many()\r\n        }\r\n        return wrap(new PrsManyTill(this.action, till.action, tillOptional)).withName(\"manyTill\");\r\n    }\r\n\r\n    manySepBy(sep : AnyParser, maxIterations = Infinity) {\r\n        return wrap(new PrsManySepBy(this.action, sep.action, maxIterations)).withName(\"manySepBy\");\r\n    }\r\n\r\n    exactly(count : number) {\r\n        return wrap(new PrsExactly(this.action, count)).withName(\"exactly\");\r\n    }\r\n\r\n\r\n    result(r : any) {\r\n        return wrap(new PrsMapResult(this.action, r)).withName(\"result\");\r\n    }\r\n\r\n    get not() {\r\n        return wrap(new PrsNot(this.action)).withName(\"not\");\r\n    }\r\n\r\n    orVal(x : any) {\r\n        return wrap(new PrsAltVal(this.action, x)).withName(\"orVal\");\r\n    }\r\n\r\n    cast<S>() {\r\n        return this;\r\n    }\r\n\r\n    get str() {\r\n        return wrap(new PrsStr(this.action)).withName(\"str\");\r\n    }\r\n\r\n    must(condition : Function, name = \"(unnamed condition)\", fail : ReplyKind.Fail = ReplyKind.HardFail) {\r\n        let cond = condition;\r\n        if (!this.isLoud) {\r\n            cond = (x, state) => condition(state);\r\n        }\r\n        return wrap(new PrsMust(this.action, cond as any, fail, name)).withName(\"must\");\r\n    }\r\n\r\n    mustNotBeOf(...options : any[]) {\r\n        return this.must(x => !options.includes(x), `none of: ${options.join(\", \")}`).withName(\"mustNotBeOf\");\r\n    }\r\n\r\n    mustBeOf(...options : any[]) {\r\n        return this.must(x => options.includes(x), `one of: ${options.join(\", \")}`).withName(\"mustBeOf\");\r\n    }\r\n\r\n    get mustBeNonEmpty() {\r\n        return this.must(x => {\r\n            return Predicates.nonEmpty(x);\r\n        }, `be non-empty`, ReplyKind.HardFail).withName(\"mustBeNonEmpty\");\r\n    }\r\n\r\n    withName(newName : string) {\r\n        (this as {displayName : string}).displayName = newName;\r\n        return this;\r\n    }\r\n\r\n}"],"sourceRoot":"/src"}