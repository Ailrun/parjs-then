{"version":3,"sources":["internal/implementation/combinators/sequential/manySepBy.ts"],"names":[],"mappings":";;AAAA;;GAEG,CAAC,MAAM;AACV,yCAAyC;AAEzC,yCAAoC;AACpC,6CAA4C;AAI5C,qDAAqD;AACrD;;GAEG;AACH,kBAA0B,SAAQ,oBAAW;IAIzC,YAAoB,IAAsB,EAAU,GAAqB,EAAU,aAAsB;QACrG,KAAK,EAAE,CAAC;QADQ,SAAI,GAAJ,IAAI,CAAkB;QAAU,QAAG,GAAH,GAAG,CAAkB;QAAU,kBAAa,GAAb,aAAa,CAAS;QAErG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,IAAI,EAAE,GAAG,EAAE,aAAa,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC;QAC9C,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACf,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC;QACX,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;YACnB,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC;YACd,EAAE,CAAC,IAAI,GAAG,iBAAS,CAAC,EAAE,CAAC;YACvB,MAAM,CAAC;QACX,CAAC;QACD,IAAI,EAAC,QAAQ,EAAC,GAAG,EAAE,CAAC;QACpB,sBAAY,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,IAAI,EAAE,CAAC;YACV,EAAE,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC;gBAAC,KAAK,CAAC;YAC9B,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,KAAK,CAAC;YACV,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC;YACX,CAAC;YAED,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;gBACZ,KAAK,CAAC;YACV,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC;YACX,CAAC;YACD,EAAE,CAAC,CAAC,aAAa,IAAI,QAAQ,IAAI,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACxD,eAAM,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;YAC5C,CAAC;YACD,sBAAY,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YACtC,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;YACvB,CAAC,EAAE,CAAC;QACR,CAAC;QACD,EAAE,CAAC,IAAI,GAAG,iBAAS,CAAC,EAAE,CAAC;QACvB,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACvB,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;QACf,MAAM,CAAC;IACX,CAAC;CACJ;AAnDD,oCAmDC","file":"manySepBy.js","sourcesContent":["/**\r\n * @module parjs/internal/implementation/combinators\r\n */ /** */\r\nimport {ParjsAction} from \"../../action\";\r\nimport {QUIET_RESULT} from \"../../special-results\";\r\nimport {Issues} from '../../issues';\r\nimport {ReplyKind} from \"../../../../reply\";\r\nimport {AnyParserAction} from \"../../../action\";\r\nimport {ParsingState} from \"../../state\";\r\nimport _ = require('lodash');\r\nimport {ArrayHelpers} from \"../../functions/helpers\";\r\n/**\r\n * Created by User on 21-Nov-16.\r\n */\r\nexport class PrsManySepBy extends ParjsAction {\r\n    isLoud : boolean;\r\n\r\n    expecting : string;\r\n    constructor(private many : AnyParserAction, private sep : AnyParserAction, private maxIterations : number) {\r\n        super();\r\n        this.isLoud = many.isLoud;\r\n        this.expecting = many.expecting;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {many, sep, maxIterations, isLoud} = this;\r\n        let arr = [];\r\n        many.apply(ps);\r\n        if (ps.atLeast(ReplyKind.HardFail)) {\r\n            return;\r\n        } else if (ps.isSoft) {\r\n            ps.value = [];\r\n            ps.kind = ReplyKind.OK;\r\n            return;\r\n        }\r\n        let {position} = ps;\r\n        ArrayHelpers.maybePush(arr, ps.value);\r\n        let i = 1;\r\n        while (true) {\r\n            if (i >= maxIterations) break;\r\n            sep.apply(ps);\r\n            if (ps.isSoft) {\r\n                break;\r\n            } else if (ps.atLeast(ReplyKind.HardFail)) {\r\n                return;\r\n            }\r\n\r\n            many.apply(ps);\r\n            if (ps.isSoft) {\r\n                break;\r\n            } else if (ps.atLeast(ReplyKind.HardFail)) {\r\n                return;\r\n            }\r\n            if (maxIterations >= Infinity && ps.position === position) {\r\n                Issues.guardAgainstInfiniteLoop(\"many\");\r\n            }\r\n            ArrayHelpers.maybePush(arr, ps.value);\r\n            position = ps.position;\r\n            i++;\r\n        }\r\n        ps.kind = ReplyKind.OK;\r\n        ps.position = position;\r\n        ps.value = arr;\r\n        return;\r\n    }\r\n}"],"sourceRoot":"/src"}