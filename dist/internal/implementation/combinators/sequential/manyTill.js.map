{"version":3,"sources":["internal/implementation/combinators/sequential/manyTill.ts"],"names":[],"mappings":";;AAAA;;GAEG,CAAC,MAAM;AACV,yCAAyC;AAEzC,yCAAoC;AAGpC,6CAA4C;AAC5C,qDAAqD;AACrD;;GAEG;AACH,iBAAyB,SAAQ,oBAAW;IAIxC,YAAoB,IAAsB,EAAU,IAAsB,EAAU,YAAsB;QACtG,KAAK,EAAE,CAAC;QADQ,SAAI,GAAJ,IAAI,CAAkB;QAAU,SAAI,GAAJ,IAAI,CAAkB;QAAU,iBAAY,GAAZ,YAAY,CAAU;QAEtG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,GAAG,IAAI,CAAC,SAAS,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC9D,CAAC;IAED,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,IAAI,EAAE,IAAI,EAAE,YAAY,EAAC,GAAG,IAAI,CAAC;QACtC,IAAI,EAAC,QAAQ,EAAC,GAAG,EAAE,CAAC;QACpB,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,OAAO,IAAI,EAAE,CAAC;YACV,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,KAAK,CAAC;YACV,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxC,yDAAyD;gBACzD,MAAM,CAAC;YACX,CAAC;YACD,kCAAkC;YAClC,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,sBAAY,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnB,mCAAmC;gBACnC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;oBAChB,kDAAkD;oBAClD,EAAE,CAAC,IAAI,GAAG,SAAS,KAAK,CAAC,GAAG,iBAAS,CAAC,QAAQ,GAAG,iBAAS,CAAC,QAAQ,CAAC;oBACpE,MAAM,CAAC;gBACX,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,kDAAkD;oBAClD,KAAK,CAAC;gBACV,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,wBAAwB;gBACxB,MAAM,CAAC;YACX,CAAC;YACD,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC3B,eAAM,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;YAChD,CAAC;YACD,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;YACvB,SAAS,EAAE,CAAC;QAChB,CAAC;QACD,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC;QACf,EAAE,CAAC,IAAI,GAAG,iBAAS,CAAC,EAAE,CAAC;IAC3B,CAAC;CACJ;AAnDD,kCAmDC","file":"manyTill.js","sourcesContent":["/**\r\n * @module parjs/internal/implementation/combinators\r\n */ /** */\r\nimport {ParjsAction} from \"../../action\";\r\nimport {QUIET_RESULT} from \"../../special-results\";\r\nimport {Issues} from '../../issues';\r\nimport {AnyParserAction} from \"../../../action\";\r\nimport {ParsingState} from \"../../state\";\r\nimport {ReplyKind} from \"../../../../reply\";\r\nimport {ArrayHelpers} from \"../../functions/helpers\";\r\n/**\r\n * Created by User on 21-Nov-16.\r\n */\r\nexport class PrsManyTill extends ParjsAction {\r\n    isLoud : boolean;\r\n\r\n    expecting : string;\r\n    constructor(private many : AnyParserAction, private till : AnyParserAction, private tillOptional : boolean) {\r\n        super();\r\n        this.isLoud = many.isLoud;\r\n        this.expecting = `${many.expecting} or ${till.expecting}`;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {many, till, tillOptional} = this;\r\n        let {position} = ps;\r\n        let arr = [];\r\n        let successes = 0;\r\n        while (true) {\r\n            till.apply(ps);\r\n            if (ps.isOk) {\r\n                break;\r\n            } else if (ps.atLeast(ReplyKind.HardFail)) {\r\n                //if till failed hard/fatally, we return the fail result.\r\n                return;\r\n            }\r\n            //backtrack to before till failed.\r\n            ps.position = position;\r\n            many.apply(ps);\r\n            if (ps.isOk) {\r\n                ArrayHelpers.maybePush(arr, ps.value);\r\n            } else if (ps.isSoft) {\r\n                //many failed softly before till...\r\n                if (!tillOptional) {\r\n                    //if we parsed at least one element, we fail hard.\r\n                    ps.kind = successes === 0 ? ReplyKind.SoftFail : ReplyKind.HardFail;\r\n                    return;\r\n                } else {\r\n                    //till was optional, so many failing softly is OK.\r\n                    break;\r\n                }\r\n            } else {\r\n                //many failed hard/fatal\r\n                return;\r\n            }\r\n            if (ps.position === position) {\r\n                Issues.guardAgainstInfiniteLoop(\"manyTill\");\r\n            }\r\n            position = ps.position;\r\n            successes++;\r\n        }\r\n        ps.value = arr;\r\n        ps.kind = ReplyKind.OK;\r\n    }\r\n}\r\n"],"sourceRoot":"/src"}