{"version":3,"sources":["internal/implementation/combinators/backtrack/backtrack.ts"],"names":[],"mappings":";;AAAA;;GAEG,CAAC,MAAM;AACV,yCAAyC;AAGzC,kBAA0B,SAAQ,oBAAW;IAIzC,YAAoB,KAAuB;QACvC,KAAK,EAAE,CAAC;QADQ,UAAK,GAAL,KAAK,CAAkB;QAEvC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,EAAiB;QACpB,IAAI,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC;QACnB,IAAI,EAAC,QAAQ,EAAC,GAAG,EAAE,CAAC;QACpB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChB,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACV,mCAAmC;YACnC,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC3B,CAAC;QACD,qCAAqC;IACzC,CAAC;CACJ;AApBD,oCAoBC","file":"backtrack.js","sourcesContent":["/**\r\n * @module parjs/internal/implementation/combinators\r\n */ /** */\r\nimport {ParjsAction} from \"../../action\";\r\nimport {ParsingState} from \"../../state\";\r\nimport {AnyParserAction} from \"../../../action\";\r\nexport class PrsBacktrack extends ParjsAction {\r\n\r\n    isLoud : boolean;\r\n    expecting : string;\r\n    constructor(private inner : AnyParserAction) {\r\n        super();\r\n        this.isLoud = inner.isLoud;\r\n        this.expecting = inner.expecting;\r\n    }\r\n\r\n    _apply(ps : ParsingState) {\r\n        let {inner} = this;\r\n        let {position} = ps;\r\n        inner.apply(ps);\r\n        if (ps.isOk) {\r\n            //if inner succeeded, we backtrack.\r\n            ps.position = position;\r\n        }\r\n        //whatever code ps had, we return it.\r\n    }\r\n}"],"sourceRoot":"/src"}