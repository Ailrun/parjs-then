{"version":3,"sources":["internal/implementation/common.ts"],"names":[],"mappings":";;AAAA;;GAEG,CAAC,MAAM;AACG,QAAA,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAEnC,QAAA,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAElC,QAAA,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAExD;;GAEG;AACH,IAAiB,MAAM,CAyBtB;AAzBD,WAAiB,MAAM;IAEnB,2BAAkC,EAAC,WAAW,EAA0B,EAAE,UAAmB;QACzF,MAAM,IAAI,KAAK,CAAC,cAAc,WAAW,mCAAmC,UAAU,EAAE,CAAC,CAAC;IAC9F,CAAC;IAFe,wBAAiB,oBAEhC,CAAA;IAED,mCAA0C,EAAC,WAAW,EAA0B;QAC5E,MAAM,IAAI,KAAK,CAAC,gFAAgF,WAAW,GAAG,CAAC,CAAC;IACpH,CAAC;IAFe,gCAAyB,4BAExC,CAAA;IAED,kCAAyC,EAAC,WAAW,EAA0B;QAC3E,MAAM,IAAI,KAAK,CAAC,mBAAmB,WAAW,6DAA6D,CAAC,CAAC;IACjH,CAAC;IAFe,+BAAwB,2BAEvC,CAAA;IAED,iCAAwC,EAAC,WAAW,EAA0B;QAC1E,MAAM,IAAI,KAAK,CAAC,kBAAkB,WAAW,0BAA0B,CAAC,CAAC;IAC7E,CAAC;IAFe,8BAAuB,0BAEtC,CAAA;IAED,6BAAoC,EAAC,WAAW,EAA0B;QACtE,MAAM,IAAI,KAAK,CAAC,kBAAkB,WAAW,2BAA2B,CAAC,CAAC;IAC9E,CAAC;IAFe,0BAAmB,sBAElC,CAAA;IAED,wBAA+B,EAAC,WAAW,EAA0B;QACjE,MAAM,IAAI,KAAK,CAAC,2BAA2B,WAAW,gCAAgC,CAAC,CAAC;IAC5F,CAAC;IAFe,qBAAc,iBAE7B,CAAA;AACL,CAAC,EAzBgB,MAAM,GAAN,cAAM,KAAN,cAAM,QAyBtB;AAOD,KAAK,CAAC,SAAS,CAAC,SAAS,GAAG,UAAc,CAAK;IAC3C,CAAC,KAAK,oBAAY,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC","file":"common.js","sourcesContent":["/**\r\n * @module parjs/internal/implementation\r\n */ /** */\r\nexport const QUIET_RESULT = Object.create(null);\r\n\r\nexport const FAIL_RESULT = Object.create(null);\r\n\r\nexport const UNINITIALIZED_RESULT = Object.create(null);\r\n\r\n/**\r\n * @external\r\n */\r\nexport namespace Issues {\r\n\r\n    export function stringWrongLength({displayName} : {displayName : string}, lengthHint : string) {\r\n        throw new Error(`The parser ${displayName} accepts only strings of length ${lengthHint}`);\r\n    }\r\n\r\n    export function mixedLoudnessNotPermitted({displayName} : {displayName : string}) {\r\n        throw new Error(`Parsers of mixed loudness are not permitted as arguments for the combinator '${displayName}'`);\r\n    }\r\n\r\n    export function guardAgainstInfiniteLoop({displayName} : {displayName : string}) {\r\n        throw new Error(`The combinator '${displayName}' expected one of its arguments to change the parser state.`);\r\n    }\r\n\r\n    export function quietParserNotPermitted({displayName} : {displayName : string}) {\r\n        throw new Error(`The combinator ${displayName} expected a loud parser.`);\r\n    }\r\n\r\n    export function expectedFailureKind({displayName} : {displayName : string}) {\r\n        throw new Error(`The combinator ${displayName} expected a failure kind.`);\r\n    }\r\n\r\n    export function willAlwaysFail({displayName} : {displayName : string}) {\r\n        throw new Error(`The parameters given to ${displayName} will cause it to always fail.`);\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface Array<T> {\r\n        maybePush(o : T);\r\n    }\r\n}\r\nArray.prototype.maybePush = function <T> (o : T) {\r\n    o !== QUIET_RESULT && this.push(o);\r\n};"],"sourceRoot":"/src"}