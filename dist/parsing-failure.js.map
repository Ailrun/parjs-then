{"version":3,"sources":["parsing-failure.ts"],"names":[],"mappings":";;AAKA;;GAEG;AACH,yBAAiC,SAAQ,KAAK;IAC1C,YAAmB,OAAsB;QACrC,KAAK,CAAC,mBAAmB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAD9C,YAAO,GAAP,OAAO,CAAe;IAEzC,CAAC;CACJ;AAJD,kDAIC;AAED,yBAAiC,SAAQ,KAAK;IAC1C,YAAmB,OAA2B;QAC1C,KAAK,CAAC,+CAA+C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QADjE,YAAO,GAAP,OAAO,CAAoB;IAE9C,CAAC;CACJ;AAJD,kDAIC","file":"parsing-failure.js","sourcesContent":["/**\r\n * @module parjs\r\n */ /** */\r\nimport {FailureReply, SuccessReply} from \"./internal/reply\";\r\n\r\n/**\r\n * An error that is thrown when it is assumed a parser will succeed, but it fails.\r\n */\r\nexport class ParsingFailureError extends Error {\r\n    constructor(public failure : FailureReply) {\r\n        super(`Parsing failed: ${JSON.stringify(failure, null, 2)}`);\r\n    }\r\n}\r\n\r\nexport class ParsingSuccessError extends Error {\r\n    constructor(public success : SuccessReply<any>) {\r\n        super(`Expected parsing to fail, but it succeeded: ${JSON.stringify(success)}`);\r\n    }\r\n}\r\n"],"sourceRoot":"/src"}