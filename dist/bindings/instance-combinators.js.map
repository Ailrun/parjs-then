{"version":3,"sources":["bindings/instance-combinators.ts"],"names":[],"mappings":"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","file":"instance-combinators.js","sourcesContent":["/**\r\n * Created by User on 22-Nov-16.\r\n */\r\nimport {\r\n    PrsSeq\r\n    , MapParser, PrsStr, PrsNot, PrsQuiet, PrsMapResult, PrsAlts, PrsBacktrack, PrsMust, PrsMustCapture, PrsMany, PrsSeqFunc, PrsExactly, PrsManyTill, PrsManySepBy, PrsWithState, PrsAltVal} from '../implementation/combinators';\r\nimport {BaseParjsParser} from \"../base/parser\";\r\nimport _ = require('lodash');\r\nimport {ParjsAction} from \"../base/action\";\r\nimport {Predicates} from \"../functions/predicates\";\r\nimport {LoudParser} from \"../abstract/combinators/loud\";\r\nimport {ResultKind, FailIndicator, toResultKind} from \"../abstract/basics/result\";\r\nimport {QuietParser} from \"../abstract/combinators/quiet\";\r\nimport {AnyParser} from \"../abstract/combinators/any\";\r\nimport {PrsSoft} from \"../implementation/combinators/alternatives/soft\";\r\n\r\nfunction wrap(action : ParjsAction) {\r\n    return new ParjsParser(action);\r\n}\r\n\r\nexport class ParjsParser extends BaseParjsParser implements LoudParser<any>, QuietParser{\r\n    get backtrack() {\r\n        return wrap(new PrsBacktrack(this.action))\r\n    }\r\n\r\n    mustCapture(failType : FailIndicator = ResultKind.HardFail) {\r\n        return wrap(new PrsMustCapture(this.action, toResultKind(failType)));\r\n    }\r\n\r\n    or(...others : AnyParser[]) {\r\n        return wrap(new PrsAlts([this, ...others].map(x => x.action)));\r\n    }\r\n\r\n    map(f : (result : any) => any) {\r\n        return wrap(new MapParser(this.action, f));\r\n    }\r\n\r\n    get quiet() {\r\n        return wrap(new PrsQuiet(this.action));\r\n    }\r\n\r\n    get soft() {\r\n        return wrap(new PrsSoft(this.action));\r\n    }\r\n\r\n    then(...next : any[]) : any {\r\n        let actions = [this.action, ...next.map(x => x.action)];\r\n        let seqParse = wrap(new PrsSeq(actions));\r\n        let loudCount = actions.filter(x => x.isLoud).length;\r\n        if (loudCount === 1) {\r\n            return seqParse.map(x => x[0]);\r\n        } else if (loudCount === 0) {\r\n            return seqParse.quiet;\r\n        } else {\r\n            return seqParse;\r\n        }\r\n    }\r\n    many(minSuccesses : number = 0, maxIters : number = Infinity) {\r\n        return wrap(new PrsMany(this.action, maxIters, minSuccesses));\r\n    }\r\n\r\n    manyTill(till : AnyParser, tillOptional = false) {\r\n        return wrap(new PrsManyTill(this.action, till.action, tillOptional));\r\n    }\r\n\r\n    manySepBy(sep : AnyParser, maxIterations = Infinity) {\r\n        return wrap(new PrsManySepBy(this.action, sep.action, maxIterations));\r\n    }\r\n\r\n    exactly(count : number) {\r\n        return wrap(new PrsExactly(this.action, count));\r\n    }\r\n\r\n    withState(reducer : ((state : any, result : any) => any) | Object) {\r\n        let reducer2 : ((state : any, result : any) => any);\r\n        if (typeof reducer !== \"function\") {\r\n            reducer2 = () => reducer;\r\n        } else {\r\n            reducer2 = reducer;\r\n        }\r\n        return wrap(new PrsWithState(this.action, reducer2));\r\n    }\r\n\r\n    result(r : any) {\r\n        return wrap(new PrsMapResult(this.action, r));\r\n    }\r\n\r\n    get not() {\r\n        return wrap(new PrsNot(this.action));\r\n    }\r\n\r\n    orVal(x : any) {\r\n        return wrap(new PrsAltVal(this.action, x));\r\n    }\r\n\r\n    cast() {\r\n        return this;\r\n    }\r\n\r\n    get str() {\r\n        return wrap(new PrsStr(this.action));\r\n    }\r\n\r\n    must(condition : (result : any) => boolean, name = \"(unnamed condition)\", fail : FailIndicator = ResultKind.HardFail) {\r\n        return wrap(new PrsMust(this.action, condition, toResultKind(fail), name));\r\n    }\r\n\r\n    mustNotBeOf(...options : any[]) {\r\n        return this.must(x => !options.includes(x), `none of: ${options.join(\", \")}`);\r\n    }\r\n\r\n    mustBeOf(...options : any[]) {\r\n        return this.must(x => options.includes(x), `one of: ${options.join(\", \")}`);\r\n    }\r\n\r\n    get mustBeNonEmpty() {\r\n        return this.must(x => {\r\n            return Predicates.nonEmpty(x);\r\n        }, `be non-empty`, ResultKind.HardFail);\r\n    }\r\n\r\n}"],"sourceRoot":"/src"}