{"version":3,"sources":["bindings/parsers.ts"],"names":[],"mappings":"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","file":"parsers.js","sourcesContent":["import {ParjsParser} from \"./instance-combinators\";\r\nimport {PrsCharWhere, PrsResult, PrsEof, PrsFail, PrsNewline, PrsString, PrsStringLen, PrsRest, AnyStringOf, PrsRegexp, PrsPosition, PrsState } from '../implementation/parsers';\r\nimport {PrsAlts, PrsSeq} from '../implementation/combinators';\r\nimport {ParjsAction} from \"../base/action\";\r\nimport {Chars} from \"../functions/char-indicators\";\r\nimport {CharParsers} from \"../abstract/parsers/char\";\r\nimport {StringParsers} from \"../abstract/parsers/string\";\r\nimport {PrimitiveParsers} from \"../abstract/parsers/primitives\";\r\nimport {SpecialParsers} from \"../abstract/parsers/special\";\r\nimport {StaticCombinators} from \"../abstract/combinators/static\";\r\nimport {AnyParser} from \"../abstract/combinators/any\";\r\nimport {ResultKind, FailIndicator, toResultKind} from \"../abstract/basics/result\";\r\nimport {IntOptions, PrsInt} from \"../implementation/parsers/numbers/int\";\r\nimport {FloatOptions, PrsFloat} from \"../implementation/parsers/numbers/float\";\r\nimport {NumericParsers} from \"../abstract/parsers/numeric\";\r\nimport _ = require('lodash');\r\n/**\r\n * Created by lifeg on 24/11/2016.\r\n */\r\n\r\nfunction wrap(action : ParjsAction) {\r\n    return new ParjsParser(action);\r\n}\r\n\r\nexport class ParjsParsers implements CharParsers, NumericParsers, StringParsers, PrimitiveParsers, SpecialParsers, StaticCombinators {\r\n\r\n\r\n    any(...parsers : AnyParser[]) {\r\n        return wrap(new PrsAlts(parsers.map(x => x.action)));\r\n    }\r\n\r\n    seq(...parsers : AnyParser[]) {\r\n        return wrap(new PrsSeq(parsers.map(x => x.action)));\r\n    }\r\n\r\n    get anyChar() {\r\n        return wrap(new PrsStringLen(1));\r\n    }\r\n\r\n    charWhere(predicate : (char : string) => boolean) {\r\n        return wrap(new PrsCharWhere(predicate));\r\n    }\r\n\r\n    anyCharOf(options : string) {\r\n        return this.charWhere(x => options.includes(x));\r\n    }\r\n\r\n    noCharOf(options : string) {\r\n        return this.charWhere(x => !options.includes(x));\r\n    }\r\n\r\n    get digit() {\r\n        return this.charWhere(Chars.isDigit);\r\n    }\r\n\r\n    get hex() {\r\n        return this.charWhere(Chars.isHex);\r\n    }\r\n\r\n    get upper() {\r\n        return this.charWhere(Chars.isUpper);\r\n    }\r\n\r\n    get lower() {\r\n        return this.charWhere(Chars.isLower);\r\n    }\r\n\r\n    get asciiLower() {\r\n        return this.charWhere(Chars.isAsciiLower);\r\n    }\r\n\r\n    get asciiUpper() {\r\n        return this.charWhere(Chars.isAsciiUpper);\r\n    }\r\n\r\n    get newline() {\r\n        return wrap(new PrsNewline(false));\r\n    }\r\n\r\n    get unicodeNewline() {\r\n        return wrap(new PrsNewline(true));\r\n    }\r\n\r\n    get space() {\r\n        return this.charWhere(Chars.isInlineSpace);\r\n    }\r\n\r\n    get unicodeSpace() {\r\n        return this.charWhere(Chars.isUnicodeInlineSpace);\r\n    }\r\n\r\n    get spaces() {\r\n        return this.space.many().str;\r\n    }\r\n\r\n    get unicodeSpaces() {\r\n        return this.unicodeSpaces.many().str;\r\n    }\r\n\r\n    get rest() {\r\n        return wrap(new PrsRest());\r\n    }\r\n\r\n    string(str : string) {\r\n        return wrap(new PrsString(str));\r\n    }\r\n\r\n    anyStringOf(...strs : string[]){\r\n        return wrap(new AnyStringOf(strs));\r\n    }\r\n\r\n    stringLen(length : number) {\r\n        return wrap(new PrsStringLen(length));\r\n    }\r\n\r\n    regexp(regex : RegExp) {\r\n        return wrap(new PrsRegexp(regex));\r\n    }\r\n\r\n    result(x : any) {\r\n        return wrap(new PrsResult(x));\r\n    }\r\n\r\n    get eof() {\r\n        return wrap(new PrsEof());\r\n    }\r\n\r\n    fail(expecting = \"\", kind : FailIndicator = ResultKind.SoftFail) {\r\n        return wrap(new PrsFail(toResultKind(kind), expecting));\r\n    }\r\n\r\n    get position() {\r\n        return wrap (new PrsPosition())\r\n    }\r\n\r\n    get state() {\r\n        return wrap(new PrsState());\r\n    }\r\n\r\n    int(options ?: IntOptions) {\r\n        options = _.defaults({}, options, {\r\n            base: 10,\r\n            allowSign : true\r\n        });\r\n        return wrap(new PrsInt(options));\r\n    }\r\n\r\n    float(options ?: FloatOptions) {\r\n        options = _.defaults({}, options, {\r\n            allowImplicitZero : true,\r\n            allowExponent : true,\r\n            allowSign : true,\r\n            allowFloatingPoint : true\r\n        } as FloatOptions);\r\n\r\n        return wrap(new PrsFloat(options));\r\n    }\r\n}\r\n\r\nexport const Parjs = new ParjsParsers() as CharParsers & NumericParsers & StringParsers & PrimitiveParsers & SpecialParsers & StaticCombinators;"],"sourceRoot":"/src"}